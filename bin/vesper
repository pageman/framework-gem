#!/usr/bin/env ruby
require 'fileutils.rb'
require 'grit'


def show_options
  puts ''
  puts 'Commands:'
  puts ''
  puts '  vesper create application'
  puts '    Summary: Create a new Vesper web app.'
  puts '    Example: vesper create application MyApp'
  puts ''
  puts '  vesper create app'
  puts '    Summary: Create a new Vesper web app.'
  puts '             Alias for vesper create application.'
  puts '    Example: vesper create app MyApp'
  puts ''
  puts '  vesper install plugin'
  puts '    Summary: Install a plugin from the repo (http://vesperapps.com/plugins).'
  puts '             Should be run from inside an existing Vesper app.'
  puts '    Example: vesper install plugin git@github.com:jarrodtaylor/vesper-timepiece.git'
  puts ''
  puts '  vesper remove plugin'
  puts '    Summary: Removes an existing plugin from a Vesper app.'
  puts '    Example: vesper remove plugin timepiece'
  puts ''
  puts '  vesper create plugin'
  puts '    Summary: Creates an empty plugin for development.'
  puts '             Should be run from inside an existing Vesper app.'
  puts '    Example: vesper create plugin MyPlugin'
  puts ''
  puts '  vesper run test'
  puts '    Summary: Runs a test using a file in /tests using MiniTest.'
  puts '    Example: vesper run test hello_world'
  puts ''
  puts '  vesper run tests'
  puts '    Summary: Runs tests on all the files in /tests using MiniTest'
  puts '    Example: vesper run tests'
  puts ''
  puts 'Documentation can be found online at: http://vesperapps.com/learn'
  puts ''
  puts 'Questions and comments should be send to: jarrodtaylor@me.com'
  puts ''
end


def create_app app_name
  puts "Creating #{app_name}..."
  FileUtils.cp_r File.dirname(__FILE__) + '/../lib/vesper/framework', app_name unless Dir.exists? app_name
  puts "Bundling gems..."
  exec "cd #{app_name} && bundle > /dev/null && echo '\n#{app_name} is ready. Next steps:\n  cd #{app_name}\n  rackup\n'"
end


# This should probably use a template, but we'll get to that later...
def create_plugin plugin_name
  if Dir.exists? "plugins/#{plugin_name}"
    puts ''
    puts "#{plugin_name} is already installed in /plugins."
    puts ''
  else
    puts 'Creating plugin...'
    FileUtils.mkdir "plugins/#{plugin_name}"
    FileUtils.mkdir "plugins/#{plugin_name}/application"
    File.new "plugins/#{plugin_name}/application/#{plugin_name}.rb", 'w+'
    FileUtils.mkdir "plugins/#{plugin_name}/config"
    File.new "plugins/#{plugin_name}/config/#{plugin_name}.rb", 'w+'
    FileUtils.mkdir "plugins/#{plugin_name}/tasks"
    File.new "plugins/#{plugin_name}/tasks/#{plugin_name}.rb", 'w+'
    File.new "plugins/#{plugin_name}/Gemfile", 'w+'
    File.new "plugins/#{plugin_name}/Readme.md", 'w+'
    puts ''
    puts "#{plugin_name} has been installed in /plugins."
    puts 'For more information on Vesper plugin development, visit: http://vesperapps.com/learn'
    puts ''
  end
end


def remove_plugin plugin_name
  if Dir.exists? "plugins/#{plugin_name}"
    FileUtils.rm_rf "plugins/#{plugin_name}"
    puts ''
    puts "#{plugin_name} plugin removed."
    puts ''
  else
    puts ''
    puts 'That plugin isn\'t installed'
    puts ''
  end
end


def install_plugin repo
  puts 'Installing plugin...'
  new_plugin = Grit::Git.new 'plugins/new_plugin'
  new_plugin.clone({:branch => 'master'}, repo, new_plugin.git_dir)
  FileUtils.rm_rf "#{new_plugin.git_dir}/.git"
  require "./#{new_plugin.git_dir}/meta_data.rb"
  FileUtils.mv new_plugin.git_dir, "plugins/#{META_DATA[:name]}"
  puts 'Bundling gems...'
  exec "bundle > /dev/null && echo '\n#{META_DATA[:name]} is installed in /plugins.\n'"
end

def run_test file
  if File.exists? "./tests/#{file}.rb"
    require 'minitest/autorun'
    require 'vesper'
    require "./tests/#{file}.rb"
  else
    puts ''
    puts 'I can\'t find that test. Maybe there\'s a typ0?'
    puts ''
  end
end

def run_tests
  require 'minitest/autorun'
  require 'vesper'
  Dir["./tests/**/*"].each {|file| require file}
end


ARGV[0] && ARGV[1] ? command = "#{ARGV[0]} #{ARGV[1]}" : command = false
ARGV[2] ? option = ARGV[2] : option = false


case command
when 'create application'
  option ? create_app(option) : show_options
when 'create app'
  option ? create_app(option) : show_options
when 'create plugin'
  option ? create_plugin(option) : show_options
when 'install plugin'
  option ? install_plugin(option) : show_options
when 'remove plugin'
  option ? remove_plugin(option) : show_options
when 'run test'
  option ? run_test(option) : show_options
when 'run tests'
  run_tests
else
  show_options
end