#!/usr/bin/env ruby


ARGV[0] && ARGV[1] ? msg = "#{ARGV[0]} #{ARGV[1]}" : msg = false
ARGV[2] ? rec = ARGV[2] : rec = false
ARGV[3] ? opt = ARGV[3] : opt = false


if rec && (msg == 'create application' || msg == 'create app')
  require 'fileutils.rb'
  
  if Dir.exists? rec
    puts 'That name is already taken.'
  else
    puts "Creating #{rec}..."
    FileUtils.cp_r File.dirname(__FILE__) + '/../lib/vesper/framework', rec
    FileUtils.chmod_R 0777, rec

    unless opt == '-core' || opt == '-recipe'
      puts 'Installing default plugins...'
      Dir["#{rec}/tmp/plugins/**"].each {|plugin| FileUtils.cp_r plugin, "#{rec}/plugins"}
      Dir["#{rec}/plugins/**"].each {|plugin| Dir["#{plugin}/assets/**"].each {|asset| FileUtils.cp_r asset, "#{rec}/"}}  
    end

    if opt == '-recipe'
      errors = false
      errors = true if ARGV[4].nil?
      errors = true unless File.exists?(ENV['HOME'] + '/.vesper.rb')
      require ENV['HOME'] + '/.vesper' unless errors
      errors = true unless @recipes && @recipes[ARGV[4].to_sym]
      
      if errors
        puts ''
        puts 'I can\'t seem to find that recipe.'
        puts ''
      else
        @recipes[ARGV[4].to_sym].each {|p| system "cd #{rec} && vesper install plugin #{p} -no-bundle"}
      end
    end

    FileUtils.rm_rf "#{rec}/tmp/plugins"
    puts "Bundling gems..."
    system "cd #{rec} && bundle > /dev/null"
    puts ''
    puts "#{rec} is ready. Next steps:"
    puts "  cd #{rec}"
    puts "  rackup"
    puts ''
  end
  
  exit
end


if rec && msg == 'create plugin'
  require 'fileutils.rb'
  
  rec = rec.downcase
  if Dir.exists? "plugins/#{rec}"
    puts ''
    puts "#{rec} is already installed in /plugins."
    puts ''
  else
    puts 'Creating plugin...'    
    FileUtils.cp_r File.dirname(__FILE__) + '/../lib/vesper/plugin', "plugins/#{rec}"
    FileUtils.chmod_R 0777, "plugins/#{rec}"
    File.rename "plugins/#{rec}/application/plugin.rb", "plugins/#{rec}/application/#{rec}.rb"
    File.rename "plugins/#{rec}/assets/plugin.rb", "plugins/#{rec}/assets/#{rec}.rb"
    File.rename "plugins/#{rec}/config/plugin.rb", "plugins/#{rec}/config/#{rec}.rb"
    File.rename "plugins/#{rec}/tasks/plugin.rb", "plugins/#{rec}/tasks/#{rec}.rb"
    puts ''
    puts "#{rec} has been created in /plugins."
    puts 'For more information on Vesper plugin development, visit: http://vesperapps.com'
    puts ''
  end

  exit
end


if rec && msg == 'install plugin'
  require 'fileutils.rb'
  require 'grit'
  
  plugin = rec.gsub(/(.)*\//, '').gsub(/.git/, '')
  
  puts 'Installing plugin...'
  system "cd plugins && git clone #{rec}"
  FileUtils.rm_rf "plugins/#{plugin}/.git"
  FileUtils.chmod_R 0777, "plugins/#{plugin}"

  puts 'Copying assets...'
  Dir["plugins/#{plugin}/assets/**"].each {|asset| FileUtils.cp_r asset, "./"}
  
  unless opt == '-no-bundle'
    puts 'Bundling gems...'
    system "bundle > /dev/null"
  end
  
  puts ''
  puts "#{plugin} is installed in /plugins."
  puts ''
  
  exit
end


if rec && msg == 'remove plugin'
  require 'fileutils.rb'
  
  if Dir.exists? "plugins/#{rec}"
    assets = []
    Dir["plugins/#{rec}/assets/**/*"].each {|asset| assets << asset.gsub("plugins/#{rec}/assets/", "")}
    template = []
    Dir[File.dirname(__FILE__) + '/../lib/vesper/framework/**/*'].each {|i| template << i.gsub(/(.)*framework\//, '')}
    assets.each {|asset| FileUtils.rm_rf asset if !template.include?(asset) && asset.include?('.')}
    assets.each {|asset| FileUtils.rm_rf asset if !template.include?(asset) && Dir.exists?(asset) && Dir.entries(asset) == [".", ".."]}
    FileUtils.rm_rf "plugins/#{rec}"
    system "bundle > /dev/null"
    puts ''
    puts "#{rec} plugin removed."
    puts ''
  else
    puts ''
    puts 'That plugin isn\'t installed'
    puts ''
  end
  
  exit
end


puts ''
puts 'Messages:'
puts ''
puts '  vesper create app'
puts '    Summary: Creates a new Vesper web app.'
puts '             Alias for vesper create application.'
puts '    Example: vesper create app HelloWorld'
puts ''
puts '  vesper install plugin'
puts '    Summary: Installs a plugin from a git repo.'
puts '             Should be run from inside an existing Vesper app.'
puts '    Example: vesper install plugin git@github.com:jarrodtaylor/vpi-mobile-request-router.git'
puts ''
puts '  vesper remove plugin'
puts '    Summary: Removes an existing plugin from a Vesper app.'
puts '    Example: vesper remove plugin mobile-request-router'
puts ''
puts '  vesper create plugin'
puts '    Summary: Creates an empty plugin for development.'
puts '             Should be run from inside an existing Vesper app.'
puts '    Example: vesper create plugin my-plugin'
puts ''
puts 'Documentation can be found online at: http://vesperapps.com'
puts ''
puts 'Questions and comments should be send to: jarrod@vesperapps.com'
puts ''